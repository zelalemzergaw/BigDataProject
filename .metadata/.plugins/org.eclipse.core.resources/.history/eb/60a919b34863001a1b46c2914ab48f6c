package f;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

import java.io.IOException;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class AverageComputationWithInMapperMapper extends Mapper<LongWritable, Text, Text, Pair> {

    private HashMap<String,Pair> words;

    @Override
    protected void setup(Context context) throws IOException, InterruptedException {
        words = new HashMap<>();
    }

    @Override
    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {

        String pattern = "^(\\S+) (\\S+) (\\S+) \\[([\\w:/]+\\s[+\\-]\\d{4})\\] \"(\\S+)\\s?(\\S+)?\\s?(\\S+)?\" (\\d{3}|-) (\\d+|-)\\s?\"?([^\"]*)\"?\\s?\"?([^\"]*)?\"?$";
        Pattern r = Pattern.compile(pattern);
        Matcher m = r.matcher(value.toString());
        if (m.find( )) {
            String sourceIP = m.group(1);
            String contentSize = m.group(9);
            int size = 0;
            try{
                size = Integer.parseInt(contentSize);
            }catch (NumberFormatException e) {}
            int sum = words.containsKey(sourceIP) ? words.get(sourceIP).getSum().get() + size : size;
            int count = words.containsKey(sourceIP) ? words.get(sourceIP).getCount().get() + 1 : 1;
            words.put(sourceIP, new Pair(new IntWritable(sum), new IntWritable(count)));
        }
    }

    @Override
    protected void cleanup(Context context) throws IOException, InterruptedException {
        for(String key : words.keySet()) {
            context.write(new Text(key), words.get(key));
        }
    }
}
