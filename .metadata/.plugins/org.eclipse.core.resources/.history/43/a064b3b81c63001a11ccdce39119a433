package e;

import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;

import java.io.IOException;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class AverageComputationMapper extends Mapper<LongWritable, Text, Text, IntWritable> {

    @Override
    protected void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {

        String pattern = "^(\\S+) (\\S+) (\\S+) \\[([\\w:/]+\\s[+\\-]\\d{4})\\] \"(\\S+)\\s?(\\S+)?\\s?(\\S+)?\" (\\d{3}|-) (\\d+|-)\\s?\"?([^\"]*)\"?\\s?\"?([^\"]*)?\"?$";
        Pattern r = Pattern.compile(pattern);
        Matcher m = r.matcher(value.toString());
        if (m.find( )) {
            String sourceIP = m.group(1);
            String contentSize = m.group(9);
            int size = 0;
            try{
                size = Integer.parseInt(contentSize);
            }catch (NumberFormatException e) {}
            context.write(new Text(sourceIP), new IntWritable(size));
        }
    }

}
